name: test

permissions:
  checks: write
  pull-requests: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: cargo build --verbose
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    - name: Run lint
      run: cargo fmt -- --check

  test:
    env:
      PROJECT_NAME_UNDERSCORE: blockhain_cli
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: -Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort
      RUSTDOCFLAGS: -Cpanic=abort

    runs-on: ubuntu-latest
    needs: [ lint ]

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
    - name: Cache dependencies
      uses: actions/cache@v2
      env:
        cache-name: cache-dependencies
      with:
        path: |
          ~/.cargo/.crates.toml
          ~/.cargo/.crates2.json
          ~/.cargo/bin
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          target
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
    - name: Run tests with the coverage report
      run: |
          cargo install cargo2junit grcov rust-covfix;
          cargo test --features coverage $CARGO_OPTIONS -- -Z unstable-options --format json | cargo2junit > results.xml;
          zip -0 ccov.zip `find . \( -name "$PROJECT_NAME_UNDERSCORE*.gc*" \) -print`;
          grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" --ignore "tests/*" -o lcov.info;
          rust-covfix -o lcov_correct.info lcov.info;
    - name: Upload test results
      uses: EnricoMi/publish-unit-test-result-action@v1
      with:
        check_name: Test Results
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: results.xml
    - name: Upload to CodeCov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: ./lcov.info
        fail_ci_if_error: true
